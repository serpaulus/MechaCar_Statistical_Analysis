x <- 3
x <- 3
x <- 5
numlist <- c(a, b, c)
numlist <- c(1, 2, 3, 4, 5)
?c
?letters
?list
test <- list.letters
list.letters()
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
View(demo_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[5]
demo_table[3,"Year"]
View(demo_table)
View(demo_table)
demo_table[2,2]
demo_table$Vehicle_Class
demo_table$Vehicle_Class[2]
filter_table <- demo_table2$price > 10000,]
filter_table <- demo_table[demo_table2$price > 10000,]
View(filter_table)
View(filter_table)
View(filter_table)
View(filter_table)
View(demo_table2)
View(demo_table2)
View(filter_table)
View(filter_table)
> filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table <- demo_table2[demo_table2$price > 10000,]
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
View(filter_table3)
View(filter_table3)
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
View(demo_table)
View(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
View(demo_table)
View(demo_table)
> demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table2)
View(demo_table2)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
View(demo_table3)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
View(wide_table)
> ?ggplot()
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
> plt + geom_col() #plot a bar plot
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(plt)
View(plt)
plt + geom_line()
View(summarize_demo)
View(summarize_demo)
View(summarize_demo)
View(summarize_demo)
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create heatmap summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
2
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
3
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#recreate our previous boxplot example comparing the highway fuel efficiency across manufacturers, add our data points using the geom_point() function
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
#
#The mapping argument functions exactly the same as our ggplot() function, where our mapping argument uses the aes() function to identify the variables to use
# Additionally, the data argument can be used to provide a new input data structure; otherwise, the mapping function will reference the data structure provided in the ggplot object.
#Our R code would be as follows:
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
View(mpg_summary)
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
View(plt)
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
lt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
#
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
View(filter_table2)
View(filter_table2)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?ggplot
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
load("~/R_Analysis/01_Demo/.RData")
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
load("~/R_Analysis/01_Demo/.RData")
load("~/R_Analysis/01_Demo/.RData")
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
library(tidyverse)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
shapiro.test(mtcars$wt)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?sample_n()
?Sample()
?slice_sample()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(Miles_Driven)) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#Now that we characterized our population data using our density plot, we'll create a sample dataset using dplyr's sample_n()function.
#Now that we characterized our population data using our density plot, we'll create a sample dataset using dplyr's sample_n()function.
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
#convert umerical  in the mtcars dataset interval vector "cyl" to a categorical vector
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
View(mtcars_filt)
View(mtcars_filt)
View(mtcars_filt)
View(mtcars_filt)
str(mtcars_filt)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
> summary(aov(hp ~ cyl,data=mtcars_filt)) # retrieve our p-values from aov
summary(aov(hp ~ cyl,data=mtcars_filt)) # retrieve our p-values from aov
# Note: "Pr(>F)" column, which is the same as our p-value statistic
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
#For this example, we'll test whether or not vehicle miles driven and selling price are correlated
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
>?lm()
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
ummary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
#******copy marker*****
#to test whether there is a statistical difference in the distributions of vehicle class across 1999 and 2008 from our mpg dataset, we would first need to build our contingency table as follows:
table(mpg$class,mpg$year) #generate contingency table
#pass the contingency table to the chisq.test()function:
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
To properly evaluate potential product changes, companies can use a technique called A/B testing. A/B testing is a randomized controlled experiment that uses a control (unchanged) and experimental (changed) group to test potential changes using a success metric. A/B testing is used to test whether or not the distribution of the success metric increases in the experiment group instead of the control group; we would not want to make changes to the product that would cause a decrease in the success metric.
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
setwd("~/R_Analysis/MechaCar_Statistical_Analysis")
library(dbplyr)
#Use the library() function to load the dplyr package.
library(dbplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe
MechaCar_mpg <- read.csv(MechaCar_mpg)
# Import and read in the MechaCar_mpg.csv file as a dataframe
MechaCar_mpg <- read.csv('MechaCar_mpg.csv')
View(MechaCar_mpg)
View(mtcars_filt)
lm(formula = qsec ~ vehicle_length + vehicle_weight +	spoiler_angle +	ground_clearance + AWD + mpg, data = MechaCar_mpg)
View(mtcars_filt)
lm(formula = qsec~ vehicle_length + vehicle_weight +	spoiler_angle +	ground_clearance + AWD + mpg, data = MechaCar_mpg)
lm(formula = qsec~ vehicle_length + vehicle_weight +	spoiler_angle +	ground_clearance + AWD + mpg, data = MechaCar)
lm(formula = vehicle_length + vehicle_weight +	spoiler_angle +	ground_clearance + AWD + mpg, data = MechaCar_mpg)
lm(formula = mpg ~ vehicle_length + vehicle_weight +	spoiler_angle +	ground_clearance + AWD, data = MechaCar_mpg)
summary(lm(formula = mpg ~ vehicle_length + vehicle_weight +	spoiler_angle +	ground_clearance + AWD, data = MechaCar_mpg)) #generate summary statistics
MechaCar_mpg <- read.csv('Suspension_Coil.csv')
Suspension_Coil <- read.csv('Suspension_Coil.csv')
MechaCar_mpg <- read.csv('MechaCar_mpg.csv')# Import and read in the MechaCar_mpg.csv file as a dataframe
View(Suspension_Coil)
View(Suspension_Coil)
View(Suspension_Coil)
View(demo_table2)
View(demo_table2)
View(demo_table2)
View(demo_table3)
View(filter_table)
View(demo_table2)
View(summarize_demo)
?summarise()
total_summary <- summarise(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), groups = NULL)
View(Suspension_Coil)
total_summary <- summarise(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), groups = NULL)
total_summary <- PSI %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = 'keep')
total_summary <- PSI%>%summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = 'keep')
Suspension_coil <- read.csv(file='./Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- PSI%>%summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = 'keep')
total_summary <- Suspension_coil%>%summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = 'keep')
)
total_summary <- Suspension_coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = NULL)
Suspension_coil <- read.csv(file='./Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
Suspension_Coil <- read.csv('Suspension_Coil.csv')
total_summary <- Suspension_coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = NULL)
total_summary <- Suspension_Coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), SD=sd(PSI), Num_Coil=n(), .groups = NULL)
View(total_summary)
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Var=var(PSI), SD=sd(PSI), .groups = NULL)
View(total_summary)
View(Suspension_Coil)
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) summarize(Mean=mean(PSI), Median=median(PSI), Var=var(PSI), SD=sd(PSI), .groups = NULL)
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot )%>%  summarize(Mean=mean(PSI), Median=median(PSI), Var=var(PSI), SD=sd(PSI), .groups = NULL)
View(lot_summary)
View(total_summary)
t.test(Suspension_Coil$PSI,mu=1500)
lot_1 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot1")
lot_2 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot2")
lot_3 <- subset(Suspension_Coil, Manufacturing_Lot=="Lot3")
View(lot_1)
View(lot_2)
View(lot_3)
